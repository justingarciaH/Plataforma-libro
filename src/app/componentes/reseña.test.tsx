import { render, screen } from '@testing-library/react';
import { describe, it, vi, beforeEach, expect } from 'vitest';
import { Rese침a } from '../tipos/libro';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import Rese침aComponente from './rese침a';
import * as ResenasActions from '../../actions/resenas.actions';

// Mockeo de server actions
vi.mock('../../actions/resenas.actions', () => ({
  getRese침asByLibro: vi.fn(),
  agregarRese침a: vi.fn(),
  votarRese침a: vi.fn(),
}));

describe('Rese침aComponente', () => {
  const libroId = '123';

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('muestra "No hay rese침as a칰n" cuando no hay rese침as', async () => {
    (ResenasActions.getRese침asByLibro as any).mockResolvedValue([]);

    render(await Rese침aComponente({ libroId }));

    expect(screen.getByText('No hay rese침as a칰n.')).toBeInTheDocument();
  });

  it('muestra rese침as existentes correctamente', async () => {
    const mockRese침as: Rese침a[] = [
      {
        id: '1',
        idLibro: libroId,
        usuario: 'Pepe',
        comentario: 'Excelente libro',
        valoracion: 5,
        likes: 2,
        dislikes: 0,
      },
      {
        id: '2',
        idLibro: libroId,
        usuario: 'Ana',
        comentario: 'No me gust칩',
        valoracion: 2,
        likes: 0,
        dislikes: 1,
      },
    ];
    (ResenasActions.getRese침asByLibro as any).mockResolvedValue(mockRese침as);

    render(await Rese침aComponente({ libroId }));

    expect(screen.getByText('Pepe')).toBeInTheDocument();
    expect(screen.getByText('5 Estrellas')).toBeInTheDocument();
    expect(screen.getByText('Excelente libro')).toBeInTheDocument();

    expect(screen.getByText('Ana')).toBeInTheDocument();
    expect(screen.getByText('2 Estrellas')).toBeInTheDocument();
    expect(screen.getByText('No me gust칩')).toBeInTheDocument();
  });

  it('invoca agregarRese침a al enviar el formulario', async () => {
    (ResenasActions.getRese침asByLibro as any).mockResolvedValue([]);
    (ResenasActions.agregarRese침a as any).mockResolvedValue({ success: true });

    render(await Rese침aComponente({ libroId }));

    const inputUsuario = screen.getByPlaceholderText('Tu nombre');
    const textarea = screen.getByPlaceholderText('Escribe tu rese침a aqu칤');
    const boton = screen.getByText('Agregar Rese침a');

    await userEvent.type(inputUsuario, 'Pepe');
    await userEvent.type(textarea, 'Me encant칩');
    await userEvent.click(boton);

    // Solo verificamos que la acci칩n del servidor se llam칩
    expect(ResenasActions.agregarRese침a).toHaveBeenCalled();
  });

  it('invoca votarRese침a al hacer like/dislike', async () => {
    const mockRese침as: Rese침a[] = [
      {
        id: '1',
        idLibro: libroId,
        usuario: 'Pepe',
        comentario: 'Muy bueno',
        valoracion: 4,
        likes: 0,
        dislikes: 0,
      },
    ];
    (ResenasActions.getRese침asByLibro as any).mockResolvedValue(mockRese침as);

    render(await Rese침aComponente({ libroId }));

    const botonesLike = screen.getByText(/游녨 0/);
    const botonesDislike = screen.getByText(/游녩 0/);

    await userEvent.click(botonesLike);
    await userEvent.click(botonesDislike);

    expect(ResenasActions.votarRese침a).toHaveBeenCalledTimes(2);
  });
});
